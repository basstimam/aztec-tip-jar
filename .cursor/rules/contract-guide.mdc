---
alwaysApply: true
---
Siap! Di bawah ini **struktur repo + kode scaffold** untuk **Private Tip Jar (Aztec)**. Ini sudah mencakup kontrak **Aztec.nr** (Noir untuk Aztec), skrip **TypeScript (aztec.js + PXE)** untuk deploy/call, plus env & perintah dasar. Kodenya dibuat **modular dan gampang diadapt** ke versi Aztec yang kamu pakai (mis. v1.2.0 testnet).

> Catatan penting: API/namespace Aztec bisa berubah antar rilis. Anggap ini **scaffold yang sangat dekat** dengan pola di dokumentasi (token private notes, PXE, public/ private withdraw). Kamu cukup menyesuaikan import/trait sesuai versi SDK yang kamu pakai.

---

# 📁 Struktur Repo

```
aztec-tip-jar/
├─ contracts/
│  ├─ Nargo.toml
│  ├─ TipJar.aztec.nr
│  └─ interfaces/
│     └─ IToken.aztec.nr
├─ ts/
│  ├─ config.ts
│  ├─ deploy.ts
│  ├─ tip.ts
│  ├─ scan.ts
│  ├─ withdraw_public.ts
│  └─ withdraw_private.ts
├─ .env.example
├─ package.json
├─ tsconfig.json
└─ README.md
```

---

# 🧠 Kontrak (Aztec.nr)

## `contracts/Nargo.toml`

```toml
[package]
name = "tip_jar"
type = "contract"
authors = ["you"]
version = "0.1.0"

[dependencies]
# Sesuaikan dengan versi standard library Aztec/Noir yang kamu pakai
# aztec_std = { tag = "v1.2.0", git = "https://github.com/AztecProtocol/aztec-packages" }
```

## `contracts/interfaces/IToken.aztec.nr`

> Interface sederhana agar kontrak bisa memanggil token privat/publik. Sesuaikan dengan trait yang disediakan lib token Aztec yang kamu pakai (nama fungsi/param bisa sedikit beda).

```rust
// Simplified token interface for private/public transfers.
// Adjust names/signatures to match your Aztec token library.
contract interface IToken {
    // Transfer privat: konsumsi notes dari `from`, buat notes untuk `to`.
    fn transfer_in_private(from: AztecAddress, to: AztecAddress, amount: u128, nonce: field);

    // Transfer publik: gerakkan saldo publik dari kontrak ke penerima.
    fn transfer_public(from: AztecAddress, to: AztecAddress, amount: u128);
}
```

## `contracts/TipJar.aztec.nr`

> Kontrak inti: terima **tip privat** (jadi **notes** ke alamat kontrak), lalu **owner** bisa `withdraw_public` (jumlah terlihat) atau `withdraw_private` (tetap privat jadi note ke owner).
> Komentar `// TODO:` menandai bagian yang mungkin perlu kamu sesuaikan berdasarkan lib Aztec versi kamu (auth helper, event, context, dll).

```rust
// TipJar - Private Tip Jar (anon tips) for Aztec L2
// - tip_private(amount): kirim tip privat (notes) ke kontrak
// - withdraw_public(amount, to): owner tarik dana ke saldo publik (amount terlihat)
// - withdraw_private(proof, to_private): owner tarik dana tetap privat (buat note baru)

use dep::std; // sesuaikan dengan std/lib yang tersedia di versi kamu
use dep::std::context::{PublicContext, PrivateContext}; // contoh; adjust with your version
use dep::std::types::{AztecAddress, PubKey};
use dep::std::auth; // helper untuk only_owner (jika ada)
use crate::interfaces::IToken;

struct Config {
    owner: AztecAddress,
    accepted_token: AztecAddress,
}

#[storage]
struct Storage {
    config: Config,
    // Jika ingin catat total publik (opsional), tambahkan accumulator publik di sini.
}

// --------------------- Helpers ---------------------

fn only_owner(ctx: PublicContext) {
    // TODO: ganti dengan auth helper yang valid untuk versi kamu.
    // Misal baca signer dari ctx & bandingkan ke Storage.config.owner.
    let cfg = Storage::config.read();
    assert(ctx.sender() == cfg.owner, "Unauthorized");
}

// --------------------- Public ----------------------

#[public]
fn init(ctx: PublicContext, owner: AztecAddress, accepted_token: AztecAddress) {
    // simple one-time init
    // TODO: tambahkan guard "only once" jika paket std menyediakan patternnya.
    let cfg = Config { owner, accepted_token };
    Storage::config.write(cfg);
}

// Penarikan publik: jumlah terlihat di publik (audit-friendly).
#[public]
fn withdraw_public(ctx: PublicContext, to: AztecAddress, amount: u128) {
    only_owner(ctx);
    let cfg = Storage::config.read();

    // Panggil token publik untuk transfer dari kontrak -> penerima publik
    let token: IToken = IToken::at(cfg.accepted_token);
    token.transfer_public(ctx.this(), to, amount);

    // TODO: emit event publik (opsional)
    // event WithdrawalPublic { who: to, amount }
}

// --------------------- Private ---------------------

// Kirim tip privat. Notes akan tercatat privat.
#[private]
fn tip_private(ctx: PrivateContext, amount: u128) {
    let cfg = Storage::config.read();
    let token: IToken = IToken::at(cfg.accepted_token);

    // Transfer privat: dari pengirim (ctx.sender()) ke alamat kontrak (ctx.this()).
    // nonce=0 untuk sederhana; gunakan nonce unik jika lib mensyaratkan.
    token.transfer_in_private(ctx.sender(), ctx.this(), amount, 0);

    // (Opsional) generate receipt privat untuk donor, jika ingin fitur reward/claim.
}

// Penarikan privat: dana tetap privat (dibuat note baru untuk owner).
// `proof` di sini placeholder—di praktiknya PXE menyiapkan info kepemilikan notes
// dan internal library melakukan nullify + re-mint privat.
#[private]
fn withdraw_private(ctx: PrivateContext, to_private: AztecAddress /* or PrivateRecipient */) {
    // Owner-only: untuk private fn, otorisasi biasanya diverifikasi via PXE + key owner.
    // Jika butuh hard-check address owner: baca Storage.config.owner & bandingkan ke ctx.sender()
    let cfg = Storage::config.read();
    assert(ctx.sender() == cfg.owner, "Unauthorized");

    // Di sini kamu biasanya:
    // 1) pilih/kumpulkan notes milik kontrak,
    // 2) nullify notes tersebut,
    // 3) buat note baru ke to_private (owner).
    // Banyak helper ini tersedia via lib token privat (mis. "transfer_out_private").
    // Untuk scaffolding, kita pakai pola transfer_in_private kebalikan (konsep).
    let token: IToken = IToken::at(cfg.accepted_token);

    // Pseudocode: kontrak "mengirimkan" secara privat ke owner:
    // (library aktual biasanya: token.transfer_out_private(ctx, this, owner, amount, nonce))
    // Karena API persis bisa beda, treat ini sebagai placeholder langkah-langkahnya:
    // token.transfer_out_private(ctx.this(), to_private, amount, 0);

    // TODO: ganti dengan API transfer-out privat yang sesuai library token Aztec kamu.
}
```

> **Minimalism first**: Scaffold di atas fokus ke pola alur; untuk produksi kamu bisa tambahkan **event**, **accumulator publik**, **nonce unik**, dan error yang lebih rapi.

---

# 🟦 TypeScript (aztec.js + PXE)

## `package.json`

```json
{
  "name": "aztec-tip-jar",
  "private": true,
  "type": "module",
  "scripts": {
    "build:contracts": "echo \"compile Aztec.nr here (aztec-nargo / your build cmd)\"",
    "deploy": "tsx ts/deploy.ts",
    "tip": "tsx ts/tip.ts",
    "scan": "tsx ts/scan.ts",
    "withdraw:pub": "tsx ts/withdraw_public.ts",
    "withdraw:priv": "tsx ts/withdraw_private.ts"
  },
  "dependencies": {
    "@aztec/aztec.js": "^1.2.0",
    "dotenv": "^16.4.5",
    "viem": "^2.16.0"
  },
  "devDependencies": {
    "tsx": "^4.19.0",
    "typescript": "^5.4.5"
  }
}
```

## `tsconfig.json`

```json
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2022", "DOM"],
    "module": "ES2022",
    "moduleResolution": "Node",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "outDir": "dist"
  },
  "include": ["ts"]
}
```

## `.env.example`

```
PXE_URL=http://localhost:8080          # PXE local (Sandbox) atau PXE client endpoint
AZTEC_NODE_URL=https://aztec-alpha-testnet-fullnode.zkv.xyz   # testnet public
PRIVATE_KEY=0x...                       # jika perlu wallet specific
TIPJAR_ADDRESS=0x...                    # diisi setelah deploy
ACCEPTED_TOKEN=0x...                    # alamat token di Aztec (testnet)
OWNER_ADDRESS=0x...                     # alamat owner di Aztec
```

## `ts/config.ts`

```ts
import 'dotenv/config';

export const PXE_URL = process.env.PXE_URL || 'http://localhost:8080';
export const AZTEC_NODE_URL = process.env.AZTEC_NODE_URL!;
export const OWNER_ADDRESS = process.env.OWNER_ADDRESS!;
export const ACCEPTED_TOKEN = process.env.ACCEPTED_TOKEN!;
export const TIPJAR_ADDRESS = process.env.TIPJAR_ADDRESS || '';
```

> **Catatan:** Aztec.js menyediakan cara membuat akun Aztec & konek ke PXE. Di bawah ini contoh **pola** umum (adaptasi ke API versi kamu).

## Helper: PXE & wallet (inline di setiap skrip atau ekstrak jadi util)

```ts
import { createPXEClient /*, AccountWallet, Contract, Fr } from '@aztec/aztec.js'*/;
// Sesuaikan import sesuai versi kamu

export async function connectPXE(pxeUrl: string) {
  const pxe = await /* createPXEClient */ (pxeUrl);
  // misal pxe exposes createAccount / getAccounts:
  // const account = await pxe.getOrCreateAccount({ /* ... */ });
  return { pxe /*, account */ };
}
```

> Jika kamu sudah punya **account Aztec** di PXE, ambil dari `pxe.getAccounts()`. Kalau belum, buat baru sesuai guide.

---

## `ts/deploy.ts`

```ts
import { PXE_URL, OWNER_ADDRESS, ACCEPTED_TOKEN } from './config.js';
import { connectPXE } from './pxe.js'; // kalau kamu pisah helper

// import artifact JSON hasil compile Aztec.nr (ABI + bytecode)
import TipJarArtifact from '../artifacts/TipJar.json' assert { type: 'json' };

async function main() {
  const { pxe } = await connectPXE(PXE_URL);

  // 1) Deploy contract
  // Pola umum (sesuaikan ke API versi kamu):
  // const deployer = await pxe.getSigner(); // atau ambil account
  // const tipJar = await Contract.deploy(deployer, TipJarArtifact, []).send().deployed();

  // 2) Init
  // await tipJar.methods.init(OWNER_ADDRESS, ACCEPTED_TOKEN).send().wait();

  // 3) Print address
  // console.log('TipJar deployed at:', tipJar.address.toString());
  console.log('Scaffold: fill deploy logic using your aztec.js version & artifact');
}

main().catch((e) => {
  console.error(e);
  process.exit(1);
});
```

## `ts/tip.ts`

```ts
import { PXE_URL, TIPJAR_ADDRESS } from './config.js';
import { connectPXE } from './pxe.js';
import TipJarArtifact from '../artifacts/TipJar.json' assert { type: 'json' };

const AMOUNT = 1_000n; // contoh 1000 units

async function main() {
  const { pxe } = await connectPXE(PXE_URL);

  // const account = await pxe.getSigner();
  // const tipJar = await Contract.at(TIPJAR_ADDRESS, TipJarArtifact, account);

  // Kirim tip privat
  // await tipJar.methods.tip_private(AMOUNT).send().wait();

  console.log('Scaffold: call tip_private(AMOUNT) using your aztec.js Contract methods');
}

main().catch(console.error);
```

## `ts/scan.ts`

```ts
import { PXE_URL, TIPJAR_ADDRESS } from './config.js';
import { connectPXE } from './pxe.js';

async function main() {
  const { pxe } = await connectPXE(PXE_URL);

  // Pola umum:
  // const notes = await pxe.getIncomingNotes({ contract: TIPJAR_ADDRESS });
  // const total = sum(notes.amount);
  // console.log('Private total (local view):', total);

  console.log('Scaffold: use PXE to scan & sum private notes for this contract');
}

main().catch(console.error);
```

## `ts/withdraw_public.ts`

```ts
import { PXE_URL, TIPJAR_ADDRESS, ACCEPTED_TOKEN } from './config.js';
import { connectPXE } from './pxe.js';
import TipJarArtifact from '../artifacts/TipJar.json' assert { type: 'json' };

const TO_PUBLIC = '0xYourAztecPublicAddress';
const AMOUNT = 500n;

async function main() {
  const { pxe } = await connectPXE(PXE_URL);

  // const owner = await pxe.getSigner();
  // const tipJar = await Contract.at(TIPJAR_ADDRESS, TipJarArtifact, owner);

  // await tipJar.methods.withdraw_public(TO_PUBLIC, AMOUNT).send().wait();

  console.log('Scaffold: call withdraw_public(to, amount) as owner');
}

main().catch(console.error);
```

## `ts/withdraw_private.ts`

```ts
import { PXE_URL, TIPJAR_ADDRESS } from './config.js';
import { connectPXE } from './pxe.js';
import TipJarArtifact from '../artifacts/TipJar.json' assert { type: 'json' };

// private recipient = owner private account (or a specific private recipient)
const TO_PRIVATE = '0xOwnerPrivateRecipient';

async function main() {
  const { pxe } = await connectPXE(PXE_URL);

  // const owner = await pxe.getSigner();
  // const tipJar = await Contract.at(TIPJAR_ADDRESS, TipJarArtifact, owner);

  // Private withdraw biasanya butuh proof & pemilihan notes oleh PXE, mis:
  // const proof = await pxe.buildOwnershipProof({ contract: TIPJAR_ADDRESS, ... });
  // await tipJar.methods.withdraw_private(proof, TO_PRIVATE).send().wait();

  console.log('Scaffold: call withdraw_private(proof, to_private) via PXE helpers');
}

main().catch(console.error);
```

---

# ✅ README langkah cepat

## 1) Siapkan lingkungan

```bash
pnpm i   # atau npm i / yarn
cp .env.example .env  # isi PXE_URL, dll
```

* **Sandbox**: jalankan Aztec **Sandbox** (PXE + node lokal) sesuai versi doks kamu, lalu set `PXE_URL` ke endpoint PXE.
* **Testnet**: gunakan PXE client + `AZTEC_NODE_URL` testnet (Alpha), dan alamat **accepted token** di testnet.

## 2) Build kontrak

```bash
pnpm build:contracts
# (jalankan perintah aztec-nargo / build tool yang kamu pakai untuk compile TipJar.aztec.nr)
# simpan artifact ke /artifacts/TipJar.json
```

## 3) Deploy & init

```bash
pnpm deploy
# catat address, masukkan ke .env: TIPJAR_ADDRESS=0x...
```

## 4) Kirim tip privat

```bash
pnpm tip
```

## 5) Scan & Withdraw

```bash
pnpm scan
pnpm withdraw:pub
pnpm withdraw:priv
```

---

## 🧩 Catatan integrasi (supaya cepat nyala)

* **Ganti interface token** di `IToken.aztec.nr` & panggilan fungsi di `TipJar.aztec.nr` agar cocok dengan modul token di versi SDK kamu (nama fungsi umum: `transfer_in_private`, `transfer_out_private`/`mint_private`, `transfer_public`).
* **Auth helper**: gunakan helper resmi (jika ada) untuk `only_owner`/cek signer dari `ctx`.
* **Artifacts**: hasil compile kontrak Aztec.nr harus diexport ke JSON (ABI/bytecode) dan dipakai oleh `aztec.js`.
* **PXE**: untuk flow privat, **PXE** yang menyiapkan bukti & pemilihan notes. Di skrip TS, gunakan helper bawaan SDK (nama fungsi bisa berbeda—cek docs versi kamu).

---

Kalau kamu kasih tahu **versi SDK** (mis. `@aztec/aztec.js` vX & aztec.nr vY) yang kamu pakai sekarang, aku bisa **tuliskan ulang kode di atas** dengan **import & nama fungsi yang 1:1** ke versi itu (biar langsung compile & jalan).
