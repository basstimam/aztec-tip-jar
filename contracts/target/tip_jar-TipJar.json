{
  "transpiled": true,
  "noir_version": "1.0.0-beta.7+0000000000000000000000000000000000000000",
  "name": "TipJar",
  "functions": [
    {
      "name": "constructor",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "initializer"
      ],
      "abi": {
        "parameters": [
          {
            "name": "owner",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "accepted_token",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "constructor"
      ]
    },
    {
      "name": "process_message",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "message_ciphertext",
            "type": {
              "kind": "struct",
              "path": "std::collections::bounded_vec::BoundedVec",
              "fields": [
                {
                  "name": "storage",
                  "type": {
                    "kind": "array",
                    "length": 17,
                    "type": {
                      "kind": "field"
                    }
                  }
                },
                {
                  "name": "len",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "message_context",
            "type": {
              "kind": "struct",
              "path": "aztec::messages::processing::message_context::MessageContext",
              "fields": [
                {
                  "name": "tx_hash",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "unique_note_hashes_in_tx",
                  "type": {
                    "kind": "struct",
                    "path": "std::collections::bounded_vec::BoundedVec",
                    "fields": [
                      {
                        "name": "storage",
                        "type": {
                          "kind": "array",
                          "length": 64,
                          "type": {
                            "kind": "field"
                          }
                        }
                      },
                      {
                        "name": "len",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "first_nullifier_in_tx",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "recipient",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16775516380094354375": {
            "error_kind": "fmtstring",
            "length": 40,
            "item_types": []
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "process_message"
      ]
    },
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2830029349304997821": {
            "error_kind": "fmtstring",
            "length": 27,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "4475601672736294460": {
            "error_kind": "string",
            "string": "Unauthorized"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "public_dispatch"
      ]
    },
    {
      "name": "record_tip_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "_amount",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgIEAScCAwQAHwoAAgADgEQuCIBEAAElAAAARSUAAABGKAIAAQSARScCAgQAOw4AAgABJiUAAABwHgIAAgAeAgADADMqAAIAAwAEJwICAQEkAgAEAAAAbyUAAACZJigAgAQEeAANAAAAgASAAyQAgAMAAACYKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEm",
      "debug_symbols": "tZPdjsIgEIXfhWsuGP4KvooxBisaEkIbbDfZmL77Dq6o3QRvzN5wmNL5Zg5kruToD/N5H9JpuJDN9koOOcQYzvs49G4KQ8KvV8LK0imykZQYDDoUjIBRYgUqoJpfBabLZlkoqYj9lL0vhBcmVhpd9mkimzTHSMmXi/Ptp8vo0k0nl/EUS/h0REXgKURfdgt9ZrN2Kgil5T0dhLb2gcAmVxB4A2GcVwaT/AUhVgjeRkhjuztCWqxcEdquCKJNMFLUezBSNglvbVhbbQDYpg31sQ39vzaUebyGab+GeYNQnaoILaDVhG0TrGK1CasUfGgD+B8bOwxdH/JqBJcCy8Edor+Hpzn1L6fT91hP6giPeej9cc6+kJ5zDLhuOVCudziuUIKOcrtbSukf",
      "brillig_names": [
        "record_tip_public"
      ]
    },
    {
      "name": "sync_private_state",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [],
        "return_type": null,
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16775516380094354375": {
            "error_kind": "fmtstring",
            "length": 40,
            "item_types": []
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "sync_private_state"
      ]
    },
    {
      "name": "tip_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "include_by_timestamp",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::include_by_timestamp::IncludeByTimestamp",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                          "fields": [
                            {
                              "name": "recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "content",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log_hash::LogHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "rZbbjqMwDIbfhWsuYjvHvkpVVbRlRkiIVkxZaVX13dcZCIEdJcMcbvqH0Hy1E/+pH8WlPg2vx6Z7ub4Vu/2jOPVN2zavx/Z6ru7NtePZRyH8h1TFDstC6lHMKHYUx/IsC/BfBH6AJz8FxvHe17V/s4DyT92qvu7uxa4b2rYs/lTt8P6lt1vVveu96vmtKIu6u7Ay8KVpaz96lnG1SC+VBqfFGuW8HJTeClAEE0AZvQDYrQBU0kwE1IARIdYxUAZBhgKCnJoRZk2QaQIh2olAJCBFUGkCKAchCB6jmRmet4ToTCKAOiQCMiZCsN5Ok4kDbUAAOvctBOk5EwkiicglgjrUFaJJJ5KrC2kh1gUl6wIgU90g5cSQYGMmenMUQEoHBO/LYkM/xEE5CsIMUQubCFozMiUKQsxe5bF1qWxA5QpMQ6wwvSix7VtiVagOh9Epan3lQLZEcb40eKwiRMMXICTMDGHTJiEuY3ujVbC9lTJlexS/4XuEnxsf8efOzzI2Wj+by0bvf3K6UsTTtSZ1uqhzpxvudEmQ/Gv6JAwXi0wuKuT/MGwG4owKgfDYJD2H7heMm4/E2rCrKARRCkKZ43UqWAa44r7TMmgUNDcdYNY36oEfq3PTr7sr5PaKdwdhFByFRpH+cFjVpNx9+b1CM6nvv/hiRTcqiUlhUqYhnzKR9yyrnFT5vuDp8+ib6tTWPhIf7NCdQ2D8eP97C29CY3jrr+f6MvS1TyJ2h8zfE5YSD9wF8sxeQan0Ye4J/RQbC3nK78M/",
      "brillig_names": [
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper"
      ],
      "verification_key": "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\nPa5YgJ+q7saoanj0s7xh8Z1ucGk1m79H5/kH"
    },
    {
      "name": "withdraw_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "to_private",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "include_by_timestamp",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::include_by_timestamp::IncludeByTimestamp",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                          "fields": [
                            {
                              "name": "recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "content",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log_hash::LogHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "rZbbbuJADIbfJddcjO3xHHgVhFCAtIoUBZTCSivEu6+nZHLoaqYp9IY/B/LFNv6Nb8Wx2l/fd3X7dvoo1ptbse/qpqnfd83pUF7qUytXb4UKH5qLNa4KbR5iH+Ie4kXuqwLCF0FO4C5nkbG7dFUV7kyg8qpz2VXtpVi316ZZFX/K5vr5pY9z2X7qpezkrloVVXsUFeBb3VTh6L4an1bpR7XF/mGDengc2CwFMEEPYGsmALcUgKxtT0ADOCLUPAbKIMhSRJDnAWHnBJ0mEKLrCUQKUgROE4A9xCDkGO3ACLwpxGQSATQxEdBjIgTzctpMHOgiAtD7pxBkhkw0qCQilwia2FeINp1Iri+0g7EvKNkXAJnuBq17hgY3ZmIWRwHEJiKkLpOC/hcH5SgIA4QnNlE0Z2RaFJQavCrHzqeyAc41mIGxw8ykxX5QEuN8jMNNvMLzoQPZJsVhbMgxjxADP4CQsgNEbJuE+IzxreFofKd1yviYqwc7O1iO3eSH+ep8hFxVOU4gMNYmHYP4uvezjIXmz1dk6SxEfn0YovmFiixkEJjnGEuryq/P1G88o9XoGWdTniHIeSZ2qiZI/uV/E4YfrasnvvsaRm6oejtaxlubnGWkf2Eg5iNxLlYVlSJKQjIt4jkOIpCOe2YVM6hoWObAzv+ptnJaHupuvrWirK0yHREegg+h8KuI6l45zCRR02vYa6Wm6Hr1DyXVq9BQOIS9UliwRIVHkiRxryb00j0k1NXlvqlCSCHqa3uIEcrp5e853omb97k7HarjtatCNuP6Le/ZyIs0bmXNlisbhhWb7bB0h0syg1EuhYL8Aw==",
      "brillig_names": [
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper"
      ],
      "verification_key": "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\nPa5YgJ+q7saoanj0s7xh8Z1ucGk1m79H5/kH"
    },
    {
      "name": "withdraw_private_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "_to_private",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "_amount",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "4475601672736294460": {
            "error_kind": "string",
            "string": "Unauthorized"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBGJwAABAMnAgMEAicCBAQAHwoAAwAEgEQuCIBEAAEuCIBFAAIlAAAASyUAAABMKAIAAQSARicCAgQAOw4AAgABJiUAAACYHgIAAwAeAgAEADMqAAMABAAFJwIDAQEkAgAFAAAAdSUAAADBJwIDAAEvCgADAAQeAgADAQoqBAMFJAIABQAAAJclAAAA0yYoAIAEBHgADQAAAIAEgAMkAIADAAAAwCoBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFvh4//z6k9vo8BAIBJioBAAEFPhyIAjOXRjw8BAIBJg==",
      "debug_symbols": "tZVNboMwEIXv4jULj39nuEoVRSRxKiREIgqVqoi7d9xiCAt70agb/IzxZ7/xDH6ISzhN78e2v94+RP32EKeh7br2/djdzs3Y3np++xAyPhBEbSqBTtS+EsQ9kNwSt1AJkGYRoJLwLBwLpZJAFsRCa1ErGQUuwrgo5rkSaeXjOIQQF37aCm/w3gyhH0XdT11Xic+mm34++rg3/U87NgOPMjL0F24ZeG27ENVcbbNlfipo68wyHbQjWhEg3Q4CBYhUKjGkUU8IvUOoPMIg+QVhiFdOCEc7gs4T0OgUBzQmSyjaIEo2AChrw75sw/2vDYvraWD+NLCAsN4mhNOQ2wTlCWRl2gRZCy/a4KLK2iglN1FCKAlbLO2+PKCQlwBmjQT4rcAA7Z5RyEyPkMrDo9bZWJgCwsWfzC/CWZlF2LKTLb0NqRykEFAljVkD6lQ2oD6PsNKn/GaJWSdYKpG1yNDC33xou/mwOx8H7jXndthdCnNkDW1z6sLSvU79+Wl0/LqnkXSp3IfbOVymIUTSdrMAP98UVlof4rXBHe0rTYc5Lv0N",
      "brillig_names": [
        "withdraw_private_public"
      ]
    },
    {
      "name": "withdraw_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "_to",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "_amount",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "4475601672736294460": {
            "error_kind": "string",
            "string": "Unauthorized"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBGJwAABAMnAgMEAicCBAQAHwoAAwAEgEQuCIBEAAEuCIBFAAIlAAAASyUAAABMKAIAAQSARicCAgQAOw4AAgABJiUAAACYHgIAAwAeAgAEADMqAAMABAAFJwIDAQEkAgAFAAAAdSUAAADBJwIDAAEvCgADAAQeAgADAQoqBAMFJAIABQAAAJclAAAA0yYoAIAEBHgADQAAAIAEgAMkAIADAAAAwCoBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFvh4//z6k9vo8BAIBJioBAAEFPhyIAjOXRjw8BAIBJg==",
      "debug_symbols": "tZVNboMwEIXv4jULj39nuEoVRSRxKiREIgqVqoi7d9xiCAt70agb/Izx53lmxn6ISzhN78e2v94+RP32EKeh7br2/djdzs3Y3np++xAyPhBEbSqBTtS+EsQ9kNwSt1AJkGYRoJLwLBwLpZJAFsRCa1ErGQUuwrgo5rkSaeXjOIQQF34KhQO8N0PoR1H3U9dV4rPppp+PPu5N/9OOzcCjjAz9hVsGXtsuRDVX22yZnwraOrNMB+2IVgRIt4NAASKVSgxp1BNC7xAqjzBIfkEY4pUTwtGOoPMENDrtAxqTJRRtECUbAJS1YV+24f7XhsX1b2D+b2ABYb1NCKchFwTlCWRlCoKshRdtcFFlbZSSW3mdEIq2IOy+PKCQlwBm3QnwW4EB2j2jkJkeIZWHR62ze2EKCBcPmV+EszKLsGUnW3obUjlI8bSAFaG1z26ozyOs9Cm/WWLWCZZKZC0ytPBHH3L1YeTOx4F7zbkddpfCHFlD25y6sHSvU39+Gh2/7mkkXSr34XYOl2kIkbTdLMDPN4WV1od4bXBH+0rTYY5LfwM=",
      "brillig_names": [
        "withdraw_public"
      ]
    }
  ],
  "outputs": {
    "globals": {
      "storage": [
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "TipJar"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "owner",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "accepted_token",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000002"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        }
      ]
    },
    "structs": {
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "owner",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "accepted_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "TipJar::constructor_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "TipJar::constructor_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "message_ciphertext",
                    "type": {
                      "fields": [
                        {
                          "name": "storage",
                          "type": {
                            "kind": "array",
                            "length": 17,
                            "type": {
                              "kind": "field"
                            }
                          }
                        },
                        {
                          "name": "len",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 32
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::collections::bounded_vec::BoundedVec"
                    }
                  },
                  {
                    "name": "message_context",
                    "type": {
                      "fields": [
                        {
                          "name": "tx_hash",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "unique_note_hashes_in_tx",
                          "type": {
                            "fields": [
                              {
                                "name": "storage",
                                "type": {
                                  "kind": "array",
                                  "length": 64,
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              },
                              {
                                "name": "len",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 32
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "std::collections::bounded_vec::BoundedVec"
                          }
                        },
                        {
                          "name": "first_nullifier_in_tx",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "recipient",
                          "type": {
                            "fields": [
                              {
                                "name": "inner",
                                "type": {
                                  "kind": "field"
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::messages::processing::message_context::MessageContext"
                    }
                  }
                ],
                "kind": "struct",
                "path": "TipJar::process_message_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "TipJar::process_message_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "_amount",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "TipJar::record_tip_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "TipJar::record_tip_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "TipJar::sync_private_state_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "TipJar::sync_private_state_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "amount",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "TipJar::tip_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "TipJar::tip_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to_private",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "TipJar::withdraw_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "TipJar::withdraw_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "_to_private",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "_amount",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "TipJar::withdraw_private_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "TipJar::withdraw_private_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "_to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "_amount",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "TipJar::withdraw_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "TipJar::withdraw_public_abi"
        }
      ]
    }
  },
  "file_map": {
    "103": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"
    },
    "106": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr",
      "source": "use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any. Note that the message\n    // discovery call syncs private events as well. We do not sync those here if there are no notes because we don't\n    // have an API that would access events from private functions.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process or they may be used to sync private events from TypeScript\n    // (`sync_private_state` function gets invoked by PXE::getPrivateEvents function).\n    let message_discovery_call = create_message_discovery_call();\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n\n    fn_abi\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n"
    },
    "111": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/messages/discovery/mod.nr",
      "source": "use protocol_types::{address::AztecAddress, debug_log::{debug_log, debug_log_format}};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod private_events;\npub mod private_notes;\npub mod process_message;\n\nuse crate::{\n    messages::{\n        discovery::{private_notes::MAX_NOTE_PACKED_LEN, process_message::do_process_message},\n        processing::{\n            get_private_logs, pending_tagged_log::PendingTaggedLog,\n            validate_enqueued_notes_and_events,\n        },\n    },\n    utils::array,\n};\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, note nonce, storage slot and note\n/// type ID and attempts to compute its note hash (not hashed by note nonce nor siloed by address) and inner nullifier\n/// (not siloed by address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, note_nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(note_nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::messages::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* note nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    // First we process all private logs, which can contain different kinds of messages e.g. private notes, partial\n    // notes, private events, etc.\n    let mut logs = get_private_logs(contract_address);\n    logs.for_each(|i, pending_tagged_log: PendingTaggedLog| {\n        debug_log_format(\n            \"Processing log with tag {0}\",\n            [pending_tagged_log.log.get(0)],\n        );\n\n        // We remove the tag from the pending tagged log and process the message ciphertext contained in it.\n        let message_ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n        do_process_message(\n            contract_address,\n            compute_note_hash_and_nullifier,\n            message_ciphertext,\n            pending_tagged_log.context,\n        );\n        logs.remove(i);\n    });\n\n    // Then we process all pending partial notes, regardless of whether they were found in the current or previous\n    // executions.\n    partial_notes::fetch_and_process_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    // Finally we validate all notes and events that were found as part of the previous processes, resulting in them\n    // being added to PXE's database and retrievable via oracles (get_notes) and our TS API (PXE::getPrivateEvents).\n    validate_enqueued_notes_and_events(contract_address);\n}\n"
    },
    "112": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/messages/discovery/nonce_discovery.nr",
      "source": "use crate::messages::discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub note_nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    unique_note_hashes_in_tx.for_eachi(|i, expected_unique_note_hash| {\n        // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n        // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n        let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n        // Given note nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n        // the note hash at the array index we're currently processing.\n        // TODO(#11157): handle failed note_hash_and_nullifier computation\n        let hashes = compute_note_hash_and_nullifier(\n            packed_note,\n            storage_slot,\n            note_type_id,\n            contract_address,\n            candidate_nonce,\n        )\n            .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n        let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n        if unique_note_hash == expected_unique_note_hash {\n            // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n            // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n            // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n            // PXE may fail to realize that a given note has been nullified already, and calls to the application\n            // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n            // application already has more direct means of making a call to it fail the transaction.\n            discovered_notes.push(\n                DiscoveredNoteInfo {\n                    note_nonce: candidate_nonce,\n                    note_hash: hashes.note_hash,\n                    inner_nullifier: hashes.inner_nullifier,\n                },\n            );\n\n            // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n            // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n            // notes containing random values in order to hide their contents.\n        }\n    });\n\n    debug_log_format(\n        \"Found valid nonces for a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n\nmod test {\n    use crate::{\n        messages::discovery::{NoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n        note::{\n            note_interface::{NoteHash, NoteType},\n            note_metadata::SettledNoteMetadata,\n            retrieved_note::RetrievedNote,\n            utils::compute_note_hash_for_nullify,\n        },\n        oracle::random::random,\n        test::mocks::mock_note::MockNote,\n        utils::array,\n    };\n\n    use dep::protocol_types::{\n        address::AztecAddress,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n        traits::{FromField, Packable},\n    };\n\n    use super::attempt_note_nonce_discovery;\n\n    // This implementation could be simpler, but this serves as a nice example of the expected flow in a real\n    // implementation, and as a sanity check that the interface is sufficient.\n    unconstrained fn compute_note_hash_and_nullifier(\n        packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n        storage_slot: Field,\n        note_type_id: Field,\n        contract_address: AztecAddress,\n        note_nonce: Field,\n    ) -> Option<NoteHashAndNullifier> {\n        if note_type_id == MockNote::get_id() {\n            let note = MockNote::unpack(array::subarray(packed_note.storage(), 0));\n            let note_hash = note.compute_note_hash(storage_slot);\n\n            let note_hash_for_nullify = compute_note_hash_for_nullify(\n                RetrievedNote {\n                    note,\n                    contract_address,\n                    metadata: SettledNoteMetadata::new(note_nonce).into(),\n                },\n                storage_slot,\n            );\n\n            let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n\n            Option::some(NoteHashAndNullifier { note_hash, inner_nullifier })\n        } else {\n            Option::none()\n        }\n    }\n\n    global VALUE: Field = 7;\n    global FIRST_NULLIFIER_IN_TX: Field = 47;\n    global CONTRACT_ADDRESS: AztecAddress = AztecAddress::from_field(13);\n    global STORAGE_SLOT: Field = 99;\n\n    #[test]\n    unconstrained fn no_note_hashes() {\n        let unique_note_hashes_in_tx = BoundedVec::new();\n        let packed_note = BoundedVec::new();\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Failed to compute a note hash\")]\n    unconstrained fn failed_hash_computation() {\n        let unique_note_hashes_in_tx = BoundedVec::from_array([random()]);\n        let packed_note = BoundedVec::new();\n        let note_type_id = 0; // This note type id is unknown to compute_note_hash_and_nullifier\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            note_type_id,\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    struct NoteAndData {\n        note: MockNote,\n        note_nonce: Field,\n        note_hash: Field,\n        unique_note_hash: Field,\n        inner_nullifier: Field,\n    }\n\n    unconstrained fn construct_note(value: Field, note_index_in_tx: u32) -> NoteAndData {\n        let note_nonce = compute_note_hash_nonce(FIRST_NULLIFIER_IN_TX, note_index_in_tx);\n\n        let retrieved_note = MockNote::new(value)\n            .contract_address(CONTRACT_ADDRESS)\n            .note_metadata(SettledNoteMetadata::new(note_nonce).into())\n            .build_retrieved_note();\n        let note = retrieved_note.note;\n\n        let note_hash = note.compute_note_hash(STORAGE_SLOT);\n        let unique_note_hash = compute_unique_note_hash(\n            note_nonce,\n            compute_siloed_note_hash(CONTRACT_ADDRESS, note_hash),\n        );\n        let inner_nullifier = note.compute_nullifier_unconstrained(compute_note_hash_for_nullify(\n            retrieved_note,\n            STORAGE_SLOT,\n        ));\n\n        NoteAndData { note, note_nonce, note_hash, unique_note_hash, inner_nullifier }\n    }\n\n    #[test]\n    unconstrained fn single_note() {\n        let note_index_in_tx = 2;\n        let note_and_data = construct_note(VALUE, note_index_in_tx);\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(note_index_in_tx, note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(note_and_data.note.pack()),\n        );\n\n        assert_eq(discovered_notes.len(), 1);\n        let discovered_note = discovered_notes.get(0);\n\n        assert_eq(discovered_note.note_nonce, note_and_data.note_nonce);\n        assert_eq(discovered_note.note_hash, note_and_data.note_hash);\n        assert_eq(discovered_note.inner_nullifier, note_and_data.inner_nullifier);\n    }\n\n    #[test]\n    unconstrained fn multiple_notes_same_preimage() {\n        let first_note_index_in_tx = 3;\n        let first_note_and_data = construct_note(VALUE, first_note_index_in_tx);\n\n        let second_note_index_in_tx = 5;\n        let second_note_and_data = construct_note(VALUE, second_note_index_in_tx);\n\n        // Both notes have the same preimage (and therefore packed representation), so both should be found in the same\n        // call.\n        assert_eq(first_note_and_data.note, second_note_and_data.note);\n        let packed_note = first_note_and_data.note.pack();\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(first_note_index_in_tx, first_note_and_data.unique_note_hash);\n        unique_note_hashes_in_tx.set(second_note_index_in_tx, second_note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(packed_note),\n        );\n\n        assert_eq(discovered_notes.len(), 2);\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.note_nonce == first_note_and_data.note_nonce)\n                & (discovered_note.note_hash == first_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == first_note_and_data.inner_nullifier)\n        }));\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.note_nonce == second_note_and_data.note_nonce)\n                & (discovered_note.note_hash == second_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == second_note_and_data.inner_nullifier)\n        }));\n    }\n}\n"
    },
    "113": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/messages/discovery/partial_notes.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n        processing::{\n            enqueue_note_for_validation, get_pending_partial_notes_completion_logs,\n            log_retrieval_response::LogRetrievalResponse,\n        },\n    },\n    utils::array,\n};\n\nuse protocol_types::{\n    address::AztecAddress,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private message\n/// (e.g. the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_msg(msg_metadata, msg_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for logs that would result in the completion of pending partial notes, ultimately resulting in the notes\n/// being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    // Each of the pending partial notes might get completed by a log containing its public values. For performance\n    // reasons, we fetch all of these logs concurrently and then process them one by one, minimizing the amount of time\n    // waiting for the node roundtrip.\n    let maybe_completion_logs =\n        get_pending_partial_notes_completion_logs(contract_address, pending_partial_notes);\n\n    // Each entry in the maybe completion logs array corresponds to the entry in the pending partial notes array at the\n    // same index. This means we can use the same index as we iterate through the responses to get both the partial note\n    // and the log that might complete it.\n    assert_eq(maybe_completion_logs.len(), pending_partial_notes.len());\n\n    maybe_completion_logs.for_each(|i, maybe_log: Option<LogRetrievalResponse>| {\n        // We clear the completion logs as we read them so that the array is empty by the time we next query it.\n        // TODO(#14943): use volatile arrays to avoid having to manually clear this.\n        maybe_completion_logs.remove(i);\n\n        let pending_partial_note = pending_partial_notes.get(i);\n\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n\n            // Note that we're not removing the pending partial note from the capsule array, so we will continue\n            // searching for this tagged log when performing message discovery in the future until we either find it or\n            // the entry is somehow removed from the array.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the private message and public log plaintext to get\n            // the complete packed content.\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                log.log_payload,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            // TODO(#11627): is there anything reasonable we can do if we get a log but it doesn't result in a note\n            // being found?\n            if discovered_notes.len() == 0 {\n                panic(\n                    f\"A partial note's completion log did not result in any notes being found - this should never happen\",\n                );\n            }\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            discovered_notes.for_each(|discovered_note| {\n                enqueue_note_for_validation(\n                    contract_address,\n                    pending_partial_note.storage_slot,\n                    discovered_note.note_nonce,\n                    complete_packed_note,\n                    discovered_note.note_hash,\n                    discovered_note.inner_nullifier,\n                    log.tx_hash,\n                    pending_partial_note.recipient,\n                );\n            });\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            pending_partial_notes.remove(i);\n        }\n    });\n}\n\nfn decode_partial_note_private_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all partial note private messages must have at least {PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private message encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = msg_content.get(0);\n    let note_completion_log_tag = msg_content.get(1);\n\n    let packed_private_note_content = array::subbvec(msg_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n"
    },
    "114": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/messages/discovery/private_events.nr",
      "source": "use crate::{\n    event::event_selector::EventSelector,\n    messages::{encoding::MAX_MESSAGE_CONTENT_LEN, processing::enqueue_event_for_validation},\n    prelude::AztecAddress,\n    utils::array,\n};\nuse protocol_types::{\n    constants::GENERATOR_INDEX__EVENT_COMMITMENT, hash::poseidon2_hash_with_separator_bounded_vec,\n    traits::FromField,\n};\n\n/// The number of fields in a private event message content that are not the event's serialized representation\n/// (1 field for randomness).\nglobal PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of an event's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, randomness, etc.).\npub global MAX_EVENT_SERIALIZED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN;\n\npub unconstrained fn process_private_event_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n) {\n    // In the case of events, the msg metadata is the event selector.\n    let event_type_id = EventSelector::from_field(msg_metadata as Field);\n\n    assert(\n        msg_content.len() > PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN,\n        f\"Invalid private event message: all private event messages must have at least {PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private event message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN\",\n    );\n\n    let serialized_event_with_randomness = msg_content;\n\n    let event_commitment = poseidon2_hash_with_separator_bounded_vec(\n        serialized_event_with_randomness,\n        GENERATOR_INDEX__EVENT_COMMITMENT,\n    );\n\n    // Randomness was injected into the event payload in `emit_event_in_private_log` but we have already used it\n    // to compute the event commitment, so we can safely discard it now.\n    let serialized_event = array::subbvec(\n        serialized_event_with_randomness,\n        PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN,\n    );\n\n    enqueue_event_for_validation(\n        contract_address,\n        event_type_id,\n        serialized_event,\n        event_commitment,\n        tx_hash,\n        recipient,\n    );\n}\n"
    },
    "115": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/messages/discovery/private_notes.nr",
      "source": "use crate::{\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n        processing::enqueue_note_for_validation,\n    },\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note message content that are not the note's packed representation.\n// See the call to `std::static_assert` below to see what's in these fields.\nglobal PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_msg<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_msg(msg_metadata, msg_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private message\",\n        [discovered_notes.len() as Field],\n    );\n\n    discovered_notes.for_each(|discovered_note| {\n        enqueue_note_for_validation(\n            contract_address,\n            storage_slot,\n            discovered_note.note_nonce,\n            packed_note,\n            discovered_note.note_hash,\n            discovered_note.inner_nullifier,\n            tx_hash,\n            recipient,\n        );\n    });\n}\n\nfn decode_private_note_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all private note messages must have at least {PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private note message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = msg_content.get(0);\n    let packed_note = array::subbvec(msg_content, PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n"
    },
    "116": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/messages/discovery/process_message.nr",
      "source": "use crate::messages::{\n    discovery::{\n        ComputeNoteHashAndNullifier, partial_notes::process_partial_note_private_msg,\n        private_events::process_private_event_msg, private_notes::process_private_note_msg,\n    },\n    encoding::decode_message,\n    encryption::{aes128::AES128, log_encryption::LogEncryption},\n    msg_type::{\n        PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_EVENT_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID,\n    },\n    processing::message_context::MessageContext,\n};\n\nuse protocol_types::{\n    address::AztecAddress,\n    constants::PRIVATE_LOG_CIPHERTEXT_LEN,\n    debug_log::{debug_log, debug_log_format},\n};\n\n/// Processes a message that can contain notes, partial notes, or events.\n///\n/// Notes result in nonce discovery being performed prior to delivery, which requires knowledge of the transaction hash\n/// in which the notes would've been created (typically the same transaction in which the log was emitted), along with\n/// the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier` function. Once\n/// discovered, the notes are enqueued for validation.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\n///\n/// Events are processed by computing an event commitment from the serialized event data and its randomness field, then\n/// enqueueing the event data and commitment for validation.\npub unconstrained fn do_process_message<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    message_ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n    message_context: MessageContext,\n) {\n    let message = AES128::decrypt_log(message_ciphertext, message_context.recipient);\n\n    // The first thing to do after decrypting the message is to determine what type of message we're processing. We\n    // have 3 message types: private notes, partial notes and events.\n\n    // We decode the message to obtain the message type id, metadata and content.\n    let (msg_type_id, msg_metadata, msg_content) = decode_message(message);\n\n    if msg_type_id == PRIVATE_NOTE_MSG_TYPE_ID {\n        debug_log(\"Processing private note msg\");\n\n        process_private_note_msg(\n            contract_address,\n            message_context.tx_hash,\n            message_context.unique_note_hashes_in_tx,\n            message_context.first_nullifier_in_tx,\n            message_context.recipient,\n            compute_note_hash_and_nullifier,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID {\n        debug_log(\"Processing partial note private msg\");\n\n        process_partial_note_private_msg(\n            contract_address,\n            message_context.recipient,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PRIVATE_EVENT_MSG_TYPE_ID {\n        debug_log(\"Processing private event msg\");\n\n        process_private_event_msg(\n            contract_address,\n            message_context.recipient,\n            msg_metadata,\n            msg_content,\n            message_context.tx_hash,\n        );\n    } else {\n        debug_log_format(\"Unknown msg type id {0}\", [msg_type_id as Field]);\n    }\n}\n"
    },
    "117": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/messages/encoding.nr",
      "source": "// TODO(#12750): don't make these values assume we're using AES.\nuse crate::{\n    messages::encryption::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS, utils::array,\n};\n\npub global MAX_MESSAGE_LEN: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\nglobal MESSAGE_EXPANDED_METADATA_LEN: u32 = 1;\n\n// The standard message layout is composed of:\n//  - an initial field called the 'expanded metadata'\n//  - an arbitrary number of fields following that called the 'message content'\n//\n// ```\n// message: [ msg_expanded_metadata, ...msg_content ]\n// ```\n//\n// The expanded metadata itself is interpreted as a u128, of which:\n//  - the upper 64 bits are the message type id\n//  - the lower 64 bits are called the 'message metadata'\n//\n// ```\n// msg_expanded_metadata: [  msg_type_id    |  msg_metadata  ]\n//                        <---  64 bits --->|<--- 64 bits --->\n// ```\n//\n// The meaning of the message metadata and message content depend on the value of the message type id. Note that there\n// is nothing special about the message metadata, it _can_ be considered part of the content. It just has a different\n// name to make it distinct from the message content given that it is not a full field.\n\n/// The maximum length of a message's content, i.e. not including the expanded message metadata.\npub global MAX_MESSAGE_CONTENT_LEN: u32 = MAX_MESSAGE_LEN - MESSAGE_EXPANDED_METADATA_LEN;\n\n/// Encodes a message following aztec-nr's standard message encoding. This message can later be decoded with\n/// `decode_message` to retrieve the original values.\n///\n/// - The `msg_type` is an identifier that groups types of messages that are all processed the same way, e.g. private\n/// notes or events. Possible values are defined in `aztec::messages::msg_type`.\n/// - The `msg_metadata` and `msg_content` are the values stored in the message, whose meaning depends on the\n///  `msg_type`. The only special thing about `msg_metadata` that separates it from `msg_content` is that it is a u64\n/// instead of a full Field (due to details of how messages are encoded), allowing applications that can fit values into\n/// this smaller variable to achieve higher data efficiency.\npub fn encode_message<let N: u32>(\n    msg_type: u64,\n    msg_metadata: u64,\n    msg_content: [Field; N],\n) -> [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] {\n    std::static_assert(\n        msg_content.len() <= MAX_MESSAGE_CONTENT_LEN,\n        \"Invalid message content: it must have a length of at most MAX_MESSAGE_CONTENT_LEN\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n    let mut message: [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] = std::mem::zeroed();\n\n    message[0] = to_expanded_metadata(msg_type, msg_metadata);\n    for i in 0..msg_content.len() {\n        message[MESSAGE_EXPANDED_METADATA_LEN + i] = msg_content[i];\n    }\n\n    message\n}\n\n/// Decodes a standard aztec-nr message, i.e. one created via `encode_message`, returning the original encoded values.\n///\n/// Note that `encode_message` returns a fixed size array while this function takes a `BoundedVec`: this is because\n/// prior to decoding the message type is unknown, and consequentially not known at compile time. If working with\n/// fixed-size messages, consider using `BoundedVec::from_array` to convert them.\npub unconstrained fn decode_message(\n    message: BoundedVec<Field, MAX_MESSAGE_LEN>,\n) -> (u64, u64, BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>) {\n    assert(\n        message.len() >= MESSAGE_EXPANDED_METADATA_LEN,\n        f\"Invalid message: it must have at least {MESSAGE_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n\n    let msg_expanded_metadata = message.get(0);\n    let (msg_type_id, msg_metadata) = from_expanded_metadata(msg_expanded_metadata);\n    let msg_content = array::subbvec(message, MESSAGE_EXPANDED_METADATA_LEN);\n\n    (msg_type_id, msg_metadata, msg_content)\n}\n\nglobal U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\nfn to_expanded_metadata(msg_type: u64, msg_metadata: u64) -> Field {\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (msg_type as Field) * U64_SHIFT_MULTIPLIER;\n    let msg_metadata_field = msg_metadata as Field;\n\n    type_field + msg_metadata_field\n}\n\nfn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let msg_metadata = (input as u64);\n    let msg_type = ((input - (msg_metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    (msg_type, msg_metadata)\n}\n\nmod tests {\n    use crate::utils::array::subarray::subarray;\n    use super::{\n        decode_message, encode_message, from_expanded_metadata, MAX_MESSAGE_CONTENT_LEN,\n        to_expanded_metadata,\n    };\n\n    global U64_MAX: u64 = (2.pow_32(64) - 1) as u64;\n    global U128_MAX: Field = (2.pow_32(128) - 1);\n\n    #[test]\n    unconstrained fn encode_decode_empty_message(msg_type: u64, msg_metadata: u64) {\n        let encoded = encode_message(msg_type, msg_metadata, []);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_short_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN / 2],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_full_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn to_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(U64_MAX, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let packed = to_expanded_metadata(0, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let packed = to_expanded_metadata(0, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn from_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let input = U128_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let input = (U128_MAX - U64_MAX as Field);\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let input = U64_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let input = 0;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn to_from_expanded_metadata(original_msg_type: u64, original_msg_metadata: u64) {\n        let packed = to_expanded_metadata(original_msg_type, original_msg_metadata);\n        let (unpacked_msg_type, unpacked_msg_metadata) = from_expanded_metadata(packed);\n\n        assert_eq(original_msg_type, unpacked_msg_type);\n        assert_eq(original_msg_metadata, unpacked_msg_metadata);\n    }\n}\n"
    },
    "118": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/messages/encryption/aes128.nr",
      "source": "use dep::protocol_types::{\n    constants::{\n        GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2,\n        PRIVATE_LOG_CIPHERTEXT_LEN,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::{\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    messages::{\n        encryption::log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n        logs::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign, point_to_bytes},\n        random::get_random_bytes,\n    },\n};\n\nuse std::aes128::aes128_encrypt;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) != 0;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        messages::encryption::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n"
    },
    "134": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/messages/processing/mod.nr",
      "source": "pub(crate) mod event_validation_request;\npub mod message_context;\npub(crate) mod note_validation_request;\npub(crate) mod log_retrieval_request;\npub(crate) mod log_retrieval_response;\npub(crate) mod pending_tagged_log;\n\nuse crate::{\n    capsules::CapsuleArray,\n    event::event_selector::EventSelector,\n    messages::{\n        discovery::{\n            partial_notes::DeliveredPendingPartialNote, private_events::MAX_EVENT_SERIALIZED_LEN,\n            private_notes::MAX_NOTE_PACKED_LEN,\n        },\n        processing::{\n            log_retrieval_request::LogRetrievalRequest,\n            log_retrieval_response::LogRetrievalResponse,\n            note_validation_request::NoteValidationRequest, pending_tagged_log::PendingTaggedLog,\n        },\n    },\n    oracle,\n};\nuse event_validation_request::EventValidationRequest;\nuse protocol_types::{address::AztecAddress, hash::sha256_to_field};\n\n// Base slot for the pending tagged log array to which the fetch_tagged_logs oracle inserts found private logs.\nglobal PENDING_TAGGED_LOG_ARRAY_BASE_SLOT: Field =\n    sha256_to_field(\"AZTEC_NR::PENDING_TAGGED_LOG_ARRAY_BASE_SLOT\".as_bytes());\n\nglobal NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\nglobal EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\nglobal LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\nglobal LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\n/// Searches for private logs emitted by `contract_address` that might contain messages for one of the local accounts,\n/// and stores them in a `CapsuleArray` which is then returned.\npub(crate) unconstrained fn get_private_logs(\n    contract_address: AztecAddress,\n) -> CapsuleArray<PendingTaggedLog> {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `fetchTaggedLogs`\n    // oracle. This makes PXE synchronize tags, download logs and store the pending tagged logs in a capsule array.\n    oracle::message_processing::fetch_tagged_logs(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    CapsuleArray::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT)\n}\n\n/// Enqueues a note for validation by PXE, so that it becomes aware of a note's existence allowing for later retrieval\n/// via `get_notes` oracle. The note will be scoped to `contract_address`, meaning other contracts will not be able to\n/// access it unless authorized.\n///\n/// In order for the note validation and insertion to occur, `validate_enqueued_notes_and_events` must be later called.\n/// For optimal performance, accumulate as many note validation requests as possible and then validate them all at the\n/// end (which results in PXE minimizing the number of network round-trips).\n///\n/// The `packed_note` is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\npub(crate) unconstrained fn enqueue_note_for_validation(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) {\n    // We store requests in a `CapsuleArray`, which PXE will later read from and deserialize into its version of the\n    // Noir `NoteValidationRequest`\n    CapsuleArray::at(contract_address, NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT).push(\n        NoteValidationRequest {\n            contract_address,\n            storage_slot,\n            note_nonce,\n            packed_note,\n            note_hash,\n            nullifier,\n            tx_hash,\n            recipient,\n        },\n    )\n}\n\n/// Enqueues an event for validation by PXE, so that it can be efficiently validated and then inserted into the event\n/// store.\n///\n/// In order for the event validation and insertion to occur, `validate_enqueued_notes_and_events` must be later\n/// called. For optimal performance, accumulate as many event validation requests as possible and then validate them\n/// all at the end (which results in PXE minimizing the number of network round-trips).\npub(crate) unconstrained fn enqueue_event_for_validation(\n    contract_address: AztecAddress,\n    event_type_id: EventSelector,\n    serialized_event: BoundedVec<Field, MAX_EVENT_SERIALIZED_LEN>,\n    event_commitment: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) {\n    // We store requests in a `CapsuleArray`, which PXE will later read from and deserialize into its version of the\n    // Noir `EventValidationRequest`\n    CapsuleArray::at(contract_address, EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT).push(\n        EventValidationRequest {\n            contract_address,\n            event_type_id,\n            serialized_event,\n            event_commitment,\n            tx_hash,\n            recipient,\n        },\n    )\n}\n\n/// Validates all note and event validation requests enqueued via `enqueue_note_for_validation` and\n/// `enqueue_event_for_validation`, inserting them into the note database and event store respectively, making them\n/// queryable via `get_notes` oracle and our TS API (PXE::getPrivateEvents).\n///\n/// This automatically clears both validation request queues, so no further work needs to be done by the caller.\npub(crate) unconstrained fn validate_enqueued_notes_and_events(contract_address: AztecAddress) {\n    oracle::message_processing::validate_enqueued_notes_and_events(\n        contract_address,\n        NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT,\n        EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT,\n    );\n}\n\n/// Efficiently queries the node for logs that result in the completion of all `DeliveredPendingPartialNote`s stored in\n/// a `CapsuleArray` by performing all node communication concurrently. Returns a second `CapsuleArray` with Options for\n/// the responses that correspond to the pending partial notes at the same index.\n///\n/// For example, given an array with pending partial notes `[ p1, p2, p3 ]`, where `p1` and `p3` have corresponding\n/// completion logs but `p2` does not, the returned `CapsuleArray` will have contents\n/// `[some(p1_log), none(), some(p3_log)]`.\npub(crate) unconstrained fn get_pending_partial_notes_completion_logs(\n    contract_address: AztecAddress,\n    pending_partial_notes: CapsuleArray<DeliveredPendingPartialNote>,\n) -> CapsuleArray<Option<LogRetrievalResponse>> {\n    let log_retrieval_requests =\n        CapsuleArray::at(contract_address, LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT);\n\n    // We create a LogRetrievalRequest for each PendingPartialNote in the CapsuleArray. Because we need the indices in\n    // the request array to match the indices in the partial note array, we can't use CapsuleArray::for_each, as that\n    // function has arbitrary iteration order. Instead, we manually iterate the array from the beginning and push into\n    // the requests array, which we expect to be empty.\n    let mut i = 0;\n    let pending_partial_notes_count = pending_partial_notes.len();\n    while i < pending_partial_notes_count {\n        let pending_partial_note = pending_partial_notes.get(i);\n        log_retrieval_requests.push(\n            LogRetrievalRequest {\n                contract_address,\n                unsiloed_tag: pending_partial_note.note_completion_log_tag,\n            },\n        );\n        i += 1;\n    }\n\n    oracle::message_processing::bulk_retrieve_logs(\n        contract_address,\n        LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT,\n        LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT,\n    );\n\n    CapsuleArray::at(contract_address, LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT)\n}\n"
    },
    "155": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr",
      "source": "use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n"
    },
    "156": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(notifyEnqueuedPublicFunctionCall)]\nunconstrained fn notify_enqueued_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_enqueued_public_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_enqueued_public_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_enqueued_public_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a public call has been enqueued, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_enqueued_public_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\n#[oracle(notifySetPublicTeardownFunctionCall)]\nunconstrained fn notify_set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_set_public_teardown_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_set_public_teardown_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_public_teardown_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a teardown call has been set, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_set_public_teardown_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"
    },
    "157": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getTimestamp)]\nunconstrained fn get_timestamp_oracle() -> u64 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_timestamp() -> u64 {\n    get_timestamp_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
    },
    "158": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr",
      "source": "/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n"
    },
    "159": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr",
      "source": "use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\nstruct GetContractInstanceResult {\n    exists: bool,\n    member: Field,\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n\nunconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_deployer_oracle_avm(address)\n}\nunconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_class_id_oracle_avm(address)\n}\nunconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_deployer_internal_avm(address)[0] };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_class_id_internal_avm(address)[0] };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address)[0] };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"
    },
    "167": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/oracle/message_processing.nr",
      "source": "use protocol_types::address::AztecAddress;\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn fetch_tagged_logs(pending_tagged_log_array_base_slot: Field) {\n    fetch_tagged_logs_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(fetchTaggedLogs)]\nunconstrained fn fetch_tagged_logs_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n// This must be a single oracle and not one for notes and one for events because the entire point is to validate\n// all notes and events in one go, minimizing node round-trips.\npub(crate) unconstrained fn validate_enqueued_notes_and_events(\n    contract_address: AztecAddress,\n    note_validation_requests_array_base_slot: Field,\n    event_validation_requests_array_base_slot: Field,\n) {\n    validate_enqueued_notes_and_events_oracle(\n        contract_address,\n        note_validation_requests_array_base_slot,\n        event_validation_requests_array_base_slot,\n    );\n}\n\n#[oracle(validateEnqueuedNotesAndEvents)]\nunconstrained fn validate_enqueued_notes_and_events_oracle(\n    contract_address: AztecAddress,\n    note_validation_requests_array_base_slot: Field,\n    event_validation_requests_array_base_slot: Field,\n) {}\n\npub(crate) unconstrained fn bulk_retrieve_logs(\n    contract_address: AztecAddress,\n    log_retrieval_requests_array_base_slot: Field,\n    log_retrieval_responses_array_base_slot: Field,\n) {\n    bulk_retrieve_logs_oracle(\n        contract_address,\n        log_retrieval_requests_array_base_slot,\n        log_retrieval_responses_array_base_slot,\n    );\n}\n\n#[oracle(bulkRetrieveLogs)]\nunconstrained fn bulk_retrieve_logs_oracle(\n    contract_address: AztecAddress,\n    log_retrieval_requests_array_base_slot: Field,\n    log_retrieval_responses_array_base_slot: Field,\n) {}\n"
    },
    "17": {
      "path": "std/field/bn254.nr",
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
    },
    "172": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr",
      "source": "use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n"
    },
    "18": {
      "path": "std/field/mod.nr",
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        __assert_max_bit_size(self, BIT_SIZE);\n    }\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = __to_le_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = __to_be_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_le_radix(self, radix)\n    }\n\n    fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_be_radix(self, radix)\n    }\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(apply_range_constraint)]\nfn __assert_max_bit_size(value: Field, bit_size: u32) {}\n\n// `_radix` must be less than 256\n#[builtin(to_le_radix)]\nfn __to_le_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n// `_radix` must be less than 256\n#[builtin(to_be_radix)]\nfn __to_be_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n/// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n/// This slice will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_le_bits)]\nfn __to_le_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n/// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n/// This array will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_be_bits)]\nfn __to_be_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
    },
    "185": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr",
      "source": "use crate::context::{PublicContext, UtilityContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T> PublicMutable<T, &mut PublicContext> {\n    // docs:start:public_mutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T> PublicMutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"
    },
    "199": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/utils/array/append.nr",
      "source": "/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n"
    },
    "202": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr",
      "source": "/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n"
    },
    "203": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr",
      "source": "use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n"
    },
    "205": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr",
      "source": "use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n"
    },
    "206": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr",
      "source": "// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump as u32];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n"
    },
    "208": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/utils/field.nr",
      "source": "use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n"
    },
    "210": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/utils/point.nr",
      "source": "use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n"
    },
    "222": {
      "path": "/home/aru/nargo/github.com/noir-lang/poseidon/v0.1.1/src/poseidon2.nr",
      "source": "use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "240": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"
    },
    "283": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",
      "source": "use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"
    },
    "300": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr",
      "source": "/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"
    },
    "301": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
      "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        CONTRACT_CLASS_LOG_SIZE_IN_FIELDS, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE,\n        GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__SILOED_NOTE_HASH,\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::L2ToL1Message,\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{arrays::array_concat, field::{field_from_bytes, field_from_bytes_32_trunc}},\n};\nuse std::embedded_curve_ops::EmbeddedCurveScalar;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(note_nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [note_nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_nonce_and_unique_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    let note_nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n    compute_unique_note_hash(note_nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        compute_nonce_and_unique_note_hash(siloed_note_hash, first_nullifier, note_index_in_tx)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog::new(fields, private_log.inner.log.length)\n    }\n}\n\npub fn compute_contract_class_log_hash(log: [Field; CONTRACT_CLASS_LOG_SIZE_IN_FIELDS]) -> Field {\n    poseidon2_hash(log)\n}\n\npub fn compute_app_secret_key(\n    master_secret_key: EmbeddedCurveScalar,\n    app_address: AztecAddress,\n    app_secret_generator: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [master_secret_key.hi, master_secret_key.lo, app_address.to_field()],\n        app_secret_generator,\n    )\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let contract_address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    let recipient_bytes: [u8; 20] = recipient.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let rollup_version_id_bytes: [u8; 32] = rollup_version_id.to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n\n    let mut bytes: [u8; 148] = std::mem::zeroed();\n    for i in 0..32 {\n        bytes[i] = contract_address_bytes[i];\n        bytes[i + 32] = rollup_version_id_bytes[i];\n        // 64 - 84 are for recipient.\n        bytes[i + 84] = chain_id_bytes[i];\n        bytes[i + 116] = content_bytes[i];\n    }\n\n    for i in 0..20 {\n        bytes[64 + i] = recipient_bytes[i];\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: Scoped<L2ToL1Message>,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.inner.recipient,\n            msg.inner.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    poseidon::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as poseidon::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n// This function is  unconstrained because it is intended to be used in unconstrained context only as\n// in constrained contexts it would be too inefficient.\npub unconstrained fn poseidon2_hash_with_separator_bounded_vec<let N: u32, T>(\n    inputs: BoundedVec<Field, N>,\n    separator: T,\n) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs.get(i));\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = poseidon::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = poseidon::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0x3b18c58c739716e76429634a61375c45b3b5cd470c22ab6d3e14cee23dd992);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0xaab2a5828156782b12a1dc6f336e2bc627eb1b9514b02d511f66296990c050);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        L2ToL1Message { recipient: EthAddress::from_field(1), content: 2 }.scope(\n            AztecAddress::from_field(3),\n        ),\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `yarn-project/stdlib/src/hash/hash.test.ts`\n    let hash_from_typescript = 0x0081edf209e087ad31b3fd24263698723d57190bd1d6e9fe056fc0c0a68ee661;\n\n    assert_eq(hash, hash_from_typescript);\n}\n\n#[test]\nunconstrained fn poseidon2_hash_with_separator_bounded_vec_matches_non_bounded_vec_version() {\n    let inputs = BoundedVec::<Field, 4>::from_array([1, 2, 3]);\n    let separator = 42;\n\n    // Hash using bounded vec version\n    let bounded_result = poseidon2_hash_with_separator_bounded_vec(inputs, separator);\n\n    // Hash using regular version\n    let regular_result = poseidon2_hash_with_separator([1, 2, 3], separator);\n\n    // Results should match\n    assert_eq(bounded_result, regular_result);\n}\n"
    },
    "315": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr",
      "source": "use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] != 0 };\n        consumed_counter = 1;\n    } else if typ.is_field() | typ.as_integer().is_some() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type, _) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint =\n        quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_pack & typ.implements(packable_constraint)) {\n        // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n        let name_at_one_token = collapse_to_one_token(name);\n        let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n        // We add the individual fields to the fields array\n        let pack_method = get_trait_impl_method(\n            typ,\n            quote { crate::traits::Packable<$packed_len> },\n            quote { pack },\n        );\n        let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n        for i in 0..packed_len {\n            fields = fields.push_back(quote { $packed_struct_name[$i] });\n        }\n\n        // We add the new auxiliary variable to the aux_vars array\n        aux_vars = aux_vars.push_back(packed_struct);\n    } else if typ.is_field() {\n        // For field we just add the value to fields\n        fields = fields.push_back(name);\n    } else if typ.as_integer().is_some() | typ.is_bool() {\n        // For integer and bool we just cast to Field and add the value to fields\n        fields = fields.push_back(quote { $name as Field });\n    } else if typ.as_data_type().is_some() {\n        // For struct we pref\n        let nested_struct = typ.as_data_type().unwrap();\n        let params = nested_struct.0.fields(nested_struct.1);\n        let struct_flattened = params.map(|(param_name, param_type, _)| {\n            let maybe_prefixed_name = if name == quote {} {\n                // Triggered when the param name is of a value available in the current scope (e.g. a function\n                // argument) --> then we don't prefix the name with anything.\n                param_name\n            } else {\n                // Triggered when we want to prefix the param name with the `name` from function input. This\n                // can typically be `self` when implementing a method on a struct.\n                quote { $name.$param_name }\n            };\n            generate_serialize_to_fields(quote {$maybe_prefixed_name}, param_type, should_pack)\n        });\n        let struct_flattened_fields = struct_flattened.fold(\n            &[],\n            |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n        );\n        let struct_flattened_aux_vars = struct_flattened.fold(\n            &[],\n            |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n        );\n        fields = fields.append(struct_flattened_fields);\n        aux_vars = aux_vars.append(struct_flattened_aux_vars);\n    } else if typ.as_array().is_some() {\n        // For array we recursively call `generate_serialize_to_fields(...)` for each element\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        for i in 0..array_len {\n            let (element_fields, element_aux_vars) =\n                generate_serialize_to_fields(quote { $name[$i] }, element_type, should_pack);\n            fields = fields.append(element_fields);\n            aux_vars = aux_vars.append(element_aux_vars);\n        }\n    } else if typ.as_str().is_some() {\n        // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n        // then we add each byte to fields as a Field\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let as_member = name.as_expr().unwrap().as_member_access();\n        let var_name = if as_member.is_some() {\n            as_member.unwrap().1\n        } else {\n            name\n        };\n        let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n        let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n        for i in 0..str_len {\n            fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n        }\n        aux_vars = aux_vars.push_back(as_bytes);\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    let serialize_trait: TraitConstraint =\n        quote { Serialize<$serialized_len> }.as_trait_constraint();\n    quote {\n        impl $serialize_trait for $typ {\n            #[inline_always]\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            #[inline_always]\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n"
    },
    "318": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",
      "source": "use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n"
    },
    "353": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr",
      "source": "use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    #[inline_always]\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n}\n\nimpl<T> Empty for Option<T> {\n    #[inline_always]\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value != 0\n    }\n}\nimpl FromField for u1 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    #[inline_always]\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// T = type of item in BoundedVec\n// M = max length of BoundedVec\n// O = field length of T\n// O * M + 1 = total serialized length of BoundedVec<T, M> (the +1 is for length of the BoundedVec)\nimpl<T, let M: u32, let O: u32> Deserialize<O * M + 1> for BoundedVec<T, M>\nwhere\n    T: Deserialize<O>,\n{\n    #[inline_always]\n    fn deserialize(fields: [Field; O * M + 1]) -> Self {\n        let mut new_bounded_vec: BoundedVec<T, M> = BoundedVec::new();\n\n        // Length is stored in the last field as we need to match intrinsic Noir serialization and the `len` struct\n        // field is after `storage` struct field (see `bounded_vec.nr` in noir-stdlib)\n        let len = fields[O * M] as u32;\n\n        for i in 0..len {\n            let mut nested_fields = [0; O];\n            for j in 0..O {\n                nested_fields[j] = fields[i * O + j];\n            }\n\n            let item = T::deserialize(nested_fields);\n            new_bounded_vec.push(item);\n        }\n\n        new_bounded_vec\n    }\n}\n\n// This may cause issues if used as program input, because noir disallows empty arrays for program input.\n// I think this is okay because I don't foresee a unit type being used as input. But leaving this comment as a hint\n// if someone does run into this in the future.\nimpl<let N: u32> Deserialize<0> for () {\n    fn deserialize(_fields: [Field; 0]) -> Self {\n        ()\n    }\n}\n\nimpl<T, let M: u32, let O: u32> Serialize<O * M + 1> for BoundedVec<T, M>\nwhere\n    T: Serialize<O>,\n{\n    #[inline_always]\n    fn serialize(self) -> [Field; O * M + 1] {\n        let mut fields = [0; O * M + 1];\n\n        let storage = self.storage();\n\n        for i in 0..M {\n            let serialized_item = storage[i].serialize();\n\n            for j in 0..O {\n                fields[i * O + j] = serialized_item[j];\n            }\n        }\n\n        // Length is stored in the last field as we need to match intrinsic Noir serialization and the `len` struct\n        // field is after `storage` struct field (see `bounded_vec.nr` in noir-stdlib)\n        fields[O * M] = self.len() as Field;\n\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    #[inline_always]\n    fn deserialize(fields: [Field; N]) -> Self {\n        str::<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n\n#[test]\nunconstrained fn bounded_vec_serialization() {\n    // Test empty BoundedVec\n    let empty_vec: BoundedVec<Field, 3> = BoundedVec::from_array([]);\n    let serialized = empty_vec.serialize();\n    let deserialized = BoundedVec::<Field, 3>::deserialize(serialized);\n    assert_eq(empty_vec, deserialized);\n    assert_eq(deserialized.len(), 0);\n\n    // Test partially filled BoundedVec\n    let partial_vec: BoundedVec<[u32; 2], 3> = BoundedVec::from_array([[1, 2]]);\n    let serialized = partial_vec.serialize();\n    let deserialized = BoundedVec::<[u32; 2], 3>::deserialize(serialized);\n    assert_eq(partial_vec, deserialized);\n    assert_eq(deserialized.len(), 1);\n    assert_eq(deserialized.get(0), [1, 2]);\n\n    // Test full BoundedVec\n    let full_vec: BoundedVec<[u32; 2], 3> = BoundedVec::from_array([[1, 2], [3, 4], [5, 6]]);\n    let serialized = full_vec.serialize();\n    let deserialized = BoundedVec::<[u32; 2], 3>::deserialize(serialized);\n    assert_eq(full_vec, deserialized);\n    assert_eq(deserialized.len(), 3);\n    assert_eq(deserialized.get(0), [1, 2]);\n    assert_eq(deserialized.get(1), [3, 4]);\n    assert_eq(deserialized.get(2), [5, 6]);\n}\n"
    },
    "359": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] != 0\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as u8 as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8 as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as u16 as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16 as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as u32 as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32 as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as u64 as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64 as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\nimpl<T, let N: u32> Serialize<N + 1> for Option<T>\nwhere\n    T: Serialize<N>,\n{\n    fn serialize(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n\n        result[0] = if self.is_some() { 1 } else { 0 };\n\n        let value_serialized = self.unwrap_unchecked().serialize();\n        for i in 0..N {\n            result[1 + i] = value_serialized[i];\n        }\n\n        result\n    }\n}\n\nimpl<T, let N: u32> Deserialize<N + 1> for Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    fn deserialize(fields: [Field; N + 1]) -> Self {\n        if fields[0] == 1 {\n            let mut value_serialized: [Field; N] = std::mem::zeroed();\n            for i in 0..N {\n                value_serialized[i] = fields[1 + i];\n            }\n\n            Option::some(T::deserialize(value_serialized))\n        } else {\n            Option::none()\n        }\n    }\n}\n\nmod test {\n    use crate::traits::{Deserialize, Serialize};\n\n    #[test]\n    fn u16_serialization() {\n        let a: u16 = 10;\n        assert_eq(a, u16::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i8_serialization() {\n        let a: i8 = -10;\n        assert_eq(a, i8::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i16_serialization() {\n        let a: i16 = -10;\n        assert_eq(a, i16::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i32_serialization() {\n        let a: i32 = -10;\n        assert_eq(a, i32::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i64_serialization() {\n        let a: i64 = -10;\n        assert_eq(a, i64::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn option_field_serialization() {\n        let opt_some = Option::some(5);\n        assert_eq(Option::<_>::deserialize(opt_some.serialize()), opt_some);\n\n        let opt_none = Option::none();\n        assert_eq(Option::<Field>::deserialize(opt_none.serialize()), opt_none);\n    }\n\n    #[test]\n    fn option_array_serialization() {\n        let opt_some = Option::some([2, 5]);\n        assert_eq(Option::<_>::deserialize(opt_some.serialize()), opt_some);\n\n        let opt_none = Option::none();\n        assert_eq(Option::<Field>::deserialize(opt_none.serialize()), opt_none);\n    }\n}\n"
    },
    "377": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr",
      "source": "pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_padded_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_padded_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_padded_array::{\n    assert_sorted_transformed_i_padded_array_capped_size,\n    assert_sorted_transformed_padded_array_capped_size, validate_padded_items,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    get_split_order_hints::{get_split_order_hints_asc, SplitOrderHints},\n};\npub use assert_split_transformed_padded_arrays::assert_split_transformed_padded_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::sort_by_counter_asc;\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\n// Returns the number of consecutive elements at the start of the array for which the predicate returns false.\n// This function ensures that any element after the first matching element (predicate returns true) also matches the predicate.\npub fn array_length_until<T, let N: u32, Env>(array: [T; N], predicate: fn[Env](T) -> bool) -> u32 {\n    let mut length = 0;\n    let mut stop = false;\n    for i in 0..N {\n        if predicate(array[i]) {\n            stop = true;\n        } else {\n            assert(\n                stop == false,\n                \"matching element found after already encountering a non-matching element\",\n            );\n            length += 1;\n        }\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n// Helper function to check if an array is padded with a given value from a given index.\n// Different to padded_array_length in that it allows the elements before the given index to be the same as the padded value.\npub fn array_padded_with<T, let N: u32>(array: [T; N], from_index: u32, padded_with: T) -> bool\nwhere\n    T: Eq,\n{\n    let mut is_valid = true;\n    let mut should_check = false;\n    for i in 0..N {\n        should_check |= i == from_index;\n        is_valid &= !should_check | (array[i] == padded_with);\n    }\n    is_valid\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nfn test_array_length_until() {\n    let array = [11, 22, 33, 44, 55];\n    assert_eq(array_length_until(array, |x| x == 55), 4);\n    assert_eq(array_length_until(array, |x| x == 56), 5);\n    assert_eq(array_length_until(array, |x| x > 40), 3);\n    assert_eq(array_length_until(array, |x| x > 10), 0);\n}\n\n#[test(should_fail_with = \"matching element found after already encountering a non-matching element\")]\nfn test_array_length_until_non_consecutive_fails() {\n    let array = [1, 1, 0, 1, 0];\n    let _ = array_length_until(array, |x| x == 0);\n}\n\n#[test(should_fail_with = \"matching element found after already encountering a non-matching element\")]\nfn test_array_length_until_first_non_matching_fails() {\n    let array = [1, 0, 0, 0, 0];\n    let _ = array_length_until(array, |x| x == 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test]\nfn test_array_padded_with() {\n    let array = [11, 22, 33, 44, 44];\n    assert_eq(array_padded_with(array, 0, 44), false);\n    assert_eq(array_padded_with(array, 1, 44), false);\n    assert_eq(array_padded_with(array, 2, 44), false);\n    assert_eq(array_padded_with(array, 3, 44), true);\n    assert_eq(array_padded_with(array, 4, 44), true);\n    assert_eq(array_padded_with(array, 4, 33), false);\n    assert_eq(array_padded_with(array, 5, 44), true); // Index out of bounds.\n    assert_eq(array_padded_with(array, 0, 11), false);\n}\n"
    },
    "380": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() != 0\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "390": {
      "path": "/home/aru/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr",
      "source": "use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n"
    },
    "42": {
      "path": "std/option.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"
    },
    "43": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "50": {
      "path": "/home/aru/aztec-tip-jar/contracts/src/main.nr",
      "source": "// TipJar - Private Tip Jar for Aztec L2\n// Based on Aztec Starter pattern - v1.2.0 compatible\n\nuse dep::aztec::macros::aztec;\n\n#[aztec]\npub contract TipJar {\n    use dep::aztec::{\n        macros::{functions::{initializer, private, public}, storage::storage},\n        prelude::{AztecAddress, PublicMutable},\n    };\n\n    #[storage]\n    struct Storage<Context> {\n        owner: PublicMutable<AztecAddress, Context>,\n        accepted_token: PublicMutable<AztecAddress, Context>,\n    }\n\n    #[public]\n    #[initializer]\n    fn constructor(owner: AztecAddress, accepted_token: AztecAddress) {\n        storage.owner.write(owner);\n        storage.accepted_token.write(accepted_token);\n    }\n\n    #[private]\n    fn tip_private(amount: Field) {\n        // For now, just emit a simple transfer\n        // Will be enhanced with proper token transfer logic\n        TipJar::at(context.this_address()).record_tip_public(amount).enqueue(&mut context);\n    }\n\n    #[public]\n    fn record_tip_public(_amount: Field) {\n        // Record the tip amount - this is a placeholder\n        // In real implementation, this would update balances\n    }\n\n    #[public]\n    fn withdraw_public(_to: AztecAddress, _amount: Field) {\n        // In public functions, we can read storage\n        let owner = storage.owner.read();\n        assert(owner.eq(context.msg_sender()), \"Unauthorized\");\n        // Placeholder for token transfer logic\n        // Would call token contract's transfer_public function\n    }\n\n    #[private]\n    fn withdraw_private(to_private: AztecAddress, amount: Field) {\n        // For private functions, we need to use public function for authorization\n        // and pass the required data\n        TipJar::at(context.this_address())\n            .withdraw_private_public(to_private, amount)\n            .enqueue(&mut context);\n    }\n\n    #[public]\n    fn withdraw_private_public(_to_private: AztecAddress, _amount: Field) {\n        // This public function handles the authorization check\n        let owner = storage.owner.read();\n        assert(owner.eq(context.msg_sender()), \"Unauthorized\");\n        // Placeholder for private withdrawal logic\n        // Would call token contract's transfer_in_private function\n    }\n}\n"
    },
    "6": {
      "path": "std/collections/bounded_vec.nr",
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n"
    },
    "60": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/capsules/mod.nr",
      "source": "use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push<let N: u32>(self, value: T)\n    where\n        T: Serialize<N>,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get<let N: u32>(self, index: u32) -> T\n    where\n        T: Deserialize<N>,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    /// Iterates over the entire array, calling the callback with all values and their array index. The order in which\n    /// values are processed is arbitrary.\n    ///\n    /// It is safe to delete the current element (and only the current element) from inside the callback via `remove`:\n    /// ```noir\n    /// array.for_each(|index, value| {\n    ///   if some_condition(value) {\n    ///     array.remove(index); // safe only for this index\n    ///   }\n    /// }\n    /// ```\n    ///\n    /// If all elements in the array need to iterated over and then removed, then using `for_each` results in optimal\n    /// efficiency.\n    ///\n    /// It is **not** safe to push new elements into the array from inside the callback.\n    pub unconstrained fn for_each<Env, let N: u32>(self, f: unconstrained fn[Env](u32, T) -> ())\n    where\n        T: Deserialize<N>,\n    {\n        // Iterating over all elements is simple, but we want to do it in such a way that a) deleting the current\n        // element is safe to do, and b) deleting *all* elements is optimally efficient. This is because CapsuleArrays\n        // are typically used to hold pending tasks, so iterating them while clearing completed tasks (sometimes\n        // unconditionally, resulting in a full clear) is a very common access pattern.\n        //\n        // The way we achieve this is by iterating backwards: each element can always be deleted since it won't change\n        // any preceding (lower) indices, and if every element is deleted then every element will (in turn) be the last\n        // element. This results in an optimal full clear since `remove` will be able to skip the `capsules::copy` call\n        // to shift any elements past the deleted one (because there will be none).\n        let mut i = self.len();\n        while i > 0 {\n            i -= 1;\n            f(i, self.get(i));\n        }\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().utility().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn for_each_called_with_all_elements() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        // We store all values that we were called with and check that all (value, index) tuples are present. Note that\n        // we do not care about the order in which each tuple was passed to the closure.\n        let called_with = &mut BoundedVec::<(u32, Field), 3>::new();\n        array.for_each(|index, value| { called_with.push((index, value)); });\n\n        assert_eq(called_with.len(), 3);\n        assert(called_with.any(|(index, value)| (index == 0) & (value == 4)));\n        assert(called_with.any(|(index, value)| (index == 1) & (value == 5)));\n        assert(called_with.any(|(index, value)| (index == 2) & (value == 6)));\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_some() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| {\n            if index == 1 {\n                array.remove(index);\n            }\n        });\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 4);\n        assert_eq(array.get(1), 6);\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| { array.remove(index); });\n\n        assert_eq(array.len(), 0);\n    }\n\n    // TODO: uncomment this test once OracleMock::count is implemented in the stdlib.\n    // #[test]\n    // unconstrained fn for_each_remove_all_no_copy() {\n    //     let contract_address = setup();\n    //     let array = CapsuleArray::at(contract_address, SLOT);\n\n    //     array.push(4);\n    //     array.push(5);\n    //     array.push(6);\n\n    //     // We test that the copyCapsule was never called, which is the expensive operation we want to avoid.\n    //     let mock = OracleMock::mock(\"copyCapsule\");\n\n    //     array.for_each(|index, _| {\n    //         array.remove(index);\n    //     });\n\n    //     assert_eq(mock.count(), 0);\n    // }\n}\n"
    },
    "61": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    traits::{Deserialize, ToField},\n};\n\nuse crate::context::{\n    gas::GasOpts, private_context::PrivateContext, public_context::PublicContext,\n    returns_hash::ReturnsHash,\n};\nuse crate::hash::{hash_args, hash_calldata};\nuse crate::oracle::execution_cache;\nuse crate::test::helpers::cheatcodes;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\n// PrivateCallInterface\n\npub struct PrivateCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PrivateCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) -> T {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let returns: T = returns_hash.get_preimage();\n        returns\n    }\n\n    pub fn view(self, context: &mut PrivateContext) -> T {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PrivateCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateVoidCallInterface\n\npub struct PrivateVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PrivateVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PrivateVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticCallInterface\n\npub struct PrivateStaticCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PrivateStaticCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<N>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PrivateStaticCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticVoidCallInterface\n\npub struct PrivateStaticVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PrivateStaticVoidCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PrivateStaticVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicCallInterface\n\npub struct PublicCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PublicCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            gas_opts: GasOpts::default(),\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) -> T {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<N>())\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) -> T {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<N>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PublicCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicVoidCallInterface\n\npub struct PublicVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let M: u32, T, let N: u32> PublicVoidCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n\n    pub fn set_as_teardown(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.set_public_teardown_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            false,\n        )\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PublicVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticCallInterface\n\npub struct PublicStaticCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let M: u32, T, let N: u32> PublicStaticCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) -> T {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<N>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PublicStaticCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticVoidCallInterface\n\npub struct PublicStaticVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let M: u32, T, let N: u32> PublicStaticVoidCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PublicStaticVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// UtilityCallInterface\n\npub struct UtilityCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for UtilityCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        false\n    }\n}\n\nimpl<let M: u32, T, let N: u32> UtilityCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: std::mem::zeroed() }\n    }\n\n    pub fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    pub fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    pub fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    pub fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n}\n\n// UtilityVoidCallInterface\n\npub struct UtilityVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for UtilityVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        false\n    }\n}\n\nimpl<let M: u32, T, let N: u32> UtilityVoidCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: std::mem::zeroed() }\n    }\n\n    pub fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    pub fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    pub fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    pub fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n}\n\npub trait TXEPublicCallInterface<T, let N: u32> {\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field);\n}\n\nimpl<let M: u32, T, let N: u32> TXEPublicCallInterface<T, N> for PublicCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let (returns_hash, tx_hash) = cheatcodes::public_call_new_flow(\n            from,\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.is_static,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPublicCallInterface<T, N> for PublicVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let (returns_hash, tx_hash) = cheatcodes::public_call_new_flow(\n            from,\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.is_static,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPublicCallInterface<T, N> for PublicStaticCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let (returns_hash, tx_hash) = cheatcodes::public_call_new_flow(\n            from,\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.is_static,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPublicCallInterface<T, N> for PublicStaticVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let (returns_hash, tx_hash) = cheatcodes::public_call_new_flow(\n            from,\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.is_static,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n\n        (returns, tx_hash)\n    }\n}\n\npub trait TXEPrivateCallInterface<T, let N: u32> {\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field);\n}\n\nimpl<let M: u32, T, let N: u32> TXEPrivateCallInterface<T, N> for PrivateCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n\n        let (_end_side_effect_counter, returns_hash, tx_hash) = cheatcodes::private_call_new_flow(\n            from,\n            self.get_contract_address(),\n            self.get_selector(),\n            args,\n            args_hash,\n            self.get_is_static(),\n        );\n\n        let returns: T = ReturnsHash::new(returns_hash).get_preimage();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPrivateCallInterface<T, N> for PrivateVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let (_end_side_effect_counter, returns_hash, tx_hash) = cheatcodes::private_call_new_flow(\n            from,\n            self.get_contract_address(),\n            self.get_selector(),\n            args,\n            args_hash,\n            self.get_is_static(),\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPrivateCallInterface<T, N> for PrivateStaticCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let (_, returns_hash, tx_hash) = cheatcodes::private_call_new_flow(\n            from,\n            self.get_contract_address(),\n            self.get_selector(),\n            args,\n            args_hash,\n            self.get_is_static(),\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPrivateCallInterface<T, N> for PrivateStaticVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let (_, returns_hash, tx_hash) = cheatcodes::private_call_new_flow(\n            from,\n            self.get_contract_address(),\n            self.get_selector(),\n            args,\n            args_hash,\n            self.get_is_static(),\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n\n        (returns, tx_hash)\n    }\n}\n\npub trait TXEUtilityCallInterface<T, let N: u32> {\n    unconstrained fn call_with_txe(self) -> T;\n}\n\nimpl<let M: u32, T, let N: u32> TXEUtilityCallInterface<T, N> for UtilityCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self) -> T {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let returns_hash = crate::oracle::simulate_utility_function::simulate_utility_function(\n            self.get_contract_address(),\n            self.get_selector(),\n            args_hash,\n        );\n\n        let returns: T = ReturnsHash::new(returns_hash).get_preimage();\n        returns\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEUtilityCallInterface<T, N> for UtilityVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self) -> T {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let returns_hash = crate::oracle::simulate_utility_function::simulate_utility_function(\n            self.get_contract_address(),\n            self.get_selector(),\n            args_hash,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n        returns\n    }\n}\n"
    },
    "68": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
      "source": "use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        include_by_timestamp::IncludeByTimestamp,\n        log_hash::LogHash,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::{PrivateLog, PrivateLogData},\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub include_by_timestamp: IncludeByTimestamp,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<Counted<L2ToL1Message>, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<Counted<LogHash>, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            include_by_timestamp: IncludeByTimestamp::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            include_by_timestamp: self.include_by_timestamp,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:include-by-timestamp\n    pub fn set_include_by_timestamp(&mut self, include_by_timestamp: u64) {\n        // docs:end:include-by-timestamp\n        self.include_by_timestamp =\n            IncludeByTimestamp::min_with_u64(self.include_by_timestamp, include_by_timestamp);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content };\n        self.l2_to_l1_msgs.push(message.count(self.next_counter()));\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS], length: u32) {\n        let counter = self.next_counter();\n        let private_log =\n            PrivateLogData { log: PrivateLog::new(log, length), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        length: u32,\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log =\n            PrivateLogData { log: PrivateLog::new(log, length), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            include_by_timestamp: IncludeByTimestamp::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
    },
    "69": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr",
      "source": "use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_U32_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(\n            gas_opts.l2_gas.unwrap_or(MAX_U32_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_U32_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(\n            gas_opts.l2_gas.unwrap_or(MAX_U32_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_U32_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> u32 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> u128 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> u128 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> u32 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> u32 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> u32 {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> u128 {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> u128 {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> u32 {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> u32 {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\nunconstrained fn call_static(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_static_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> u128 {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> u128 {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> u32 {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> u32 {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"
    },
    "71": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/context/utility_context.nr",
      "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_timestamp, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    timestamp: u64,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let timestamp = get_timestamp();\n        let contract_address = get_contract_address();\n        let version = get_version();\n        let chain_id = get_chain_id();\n        Self { block_number, timestamp, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let timestamp = get_timestamp();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, timestamp, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let timestamp = get_timestamp();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, timestamp, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn timestamp(self) -> u64 {\n        self.timestamp\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
    },
    "74": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/event/event_selector.nr",
      "source": "use dep::protocol_types::{\n    hash::poseidon2_hash_bytes,\n    traits::{Deserialize, Empty, FromField, Serialize, ToField},\n};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    // TODO(#2707): Consider making this a u64 as we already cast this to that when encoding the message. This would decrease\n    // the likelihood of collisions without any extra cost.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"
    },
    "76": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/hash.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_BYTECODE, GENERATOR_INDEX__PUBLIC_CALLDATA,\n        GENERATOR_INDEX__SECRET_HASH, MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS,\n    },\n    hash::{\n        poseidon2_hash_subarray, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice,\n        sha256_to_field,\n    },\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n/**\n * Computes the public bytecode commitment for a contract class.\n * The commitment is `hash([separator, ...bytecode])` where bytecode omits the length prefix present\n * in `packed_bytecode`.\n *\n * @param packed_bytecode - The packed bytecode of the contract class. 0th word is the length in bytes.\n *    packed_bytecode is mutable so that we can avoid copying the array to construct one starting with\n *    separator instead of length.\n * @returns The public bytecode commitment.\n */\npub fn compute_public_bytecode_commitment(\n    mut packed_public_bytecode: [Field; MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS],\n) -> Field {\n    // First field element contains the length of the bytecode\n    let bytecode_length_in_bytes: u32 = packed_public_bytecode[0] as u32;\n    let bytecode_length_in_fields: u32 =\n        (bytecode_length_in_bytes / 31) + (bytecode_length_in_bytes % 31 != 0) as u32;\n    // Don't allow empty public bytecode.\n    // AVM doesn't handle execution of contracts that exist with empty bytecode.\n    assert(bytecode_length_in_fields != 0);\n    assert(bytecode_length_in_fields < MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS);\n\n    // Packed_bytecode's 0th entry is the length. Replace it with separator before hashing.\n    let separator = GENERATOR_INDEX__PUBLIC_BYTECODE.to_field();\n    packed_public_bytecode[0] = separator;\n    // +1 to length to account for the separator\n    let nonzero_length = bytecode_length_in_fields + 1;\n\n    poseidon2_hash_subarray(packed_public_bytecode, nonzero_length)\n    // NOTE: we use poseidon2_hash_subarray here because we want to hash the bytecode only up to\n    // its nonzero length. We do NOT want to include a `1` at the end to indicate \"variable length\",\n    // and we want to enforce that all trailing elements are zero.\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"
    },
    "98": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/macros/aztec.nr",
      "source": "use crate::{\n    macros::{\n        authwits::AUTHWIT_TYPES,\n        dispatch::generate_public_dispatch,\n        functions::{stub_registry, utils::check_each_fn_macroified},\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n    messages::discovery::private_notes::MAX_NOTE_PACKED_LEN,\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_private_state` utility function.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_private_state = generate_sync_private_state();\n    let process_message = generate_process_message();\n    generate_authwit_exports();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_private_state\n        $process_message\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::messages::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided note nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(note_nonce).into()\n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::messages::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `note_nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::messages::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                note_nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_authwit_exports() {\n    let authwits = AUTHWIT_TYPES.values();\n    authwits.for_each(|(s): TypeDefinition| { s.add_attribute(\"abi(authwits)\"); });\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_private_state() -> Quoted {\n    // We obtain the `utility` function on the next line instead of directly doing\n    // `#[aztec::macros::functions::utility]` in the returned quote because the latter would result in the function\n    // attribute having the full path in the ABI. This is undesirable because we use the information in the ABI only\n    // to determine whether a function is `private`, `public`, or `utility`.\n    let utility = crate::macros::functions::utility;\n\n    // All we need to do here is trigger message discovery, but this is already done by the #[utility] macro - we don't\n    // need to do anything extra.\n    quote {\n        #[$utility]\n        unconstrained fn sync_private_state() {\n        }\n    }\n}\n\ncomptime fn generate_process_message() -> Quoted {\n    // We obtain the `utility` function on the next line instead of directly doing\n    // `#[aztec::macros::functions::utility]` in the returned quote because the latter would result in the function\n    // attribute having the full path in the ABI. This is undesirable because we use the information in the ABI only\n    // to determine whether a function is `private`, `public`, or `utility`.\n    let utility = crate::macros::functions::utility;\n\n    // TODO(#15012): Here we use PRIVATE_LOG_CIPHERTEXT_LEN for message ciphertext length. Fix message vs log naming.\n    quote {\n        #[$utility]\n        unconstrained fn process_message(\n            message_ciphertext: BoundedVec<Field, aztec::protocol_types::constants::PRIVATE_LOG_CIPHERTEXT_LEN>,\n            message_context: aztec::messages::processing::message_context::MessageContext,\n        ) {\n            aztec::messages::discovery::process_message::do_process_message(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n                message_ciphertext,\n                message_context,\n            );\n        }\n    }\n}\n"
    },
    "99": {
      "path": "/home/aru/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr",
      "source": "use super::utils::{compute_fn_selector, size_in_fields};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault, panic};\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let seen_selectors =\n        &mut UHashMap::<Field, Quoted, BuildHasherDefault<Poseidon2Hasher>>::default();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n        let fn_name = function.name();\n\n        // Since function selectors are computed as the first 4 bytes of the hash of the function signature,\n        // it's possible to have collisions. With the following check, we ensure it doesn't happen within\n        // the same contract.\n        if seen_selectors.contains_key(selector) {\n            let existing_fn = seen_selectors.get(selector).unwrap();\n            panic(\n                f\"Public function selector collision detected between functions '{fn_name}' and '{existing_fn}'\",\n            );\n        }\n        seen_selectors.insert(selector, fn_name);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index: &mut u32 = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n"
    }
  }
}
